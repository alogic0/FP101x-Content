1
00:00:01,189 --> 00:00:03,649
Olá a todos, e bem-vindo de volta
ao

2
00:00:03,649 --> 00:00:07,149
FP101x - Functional Programming.

3
00:00:07,149 --> 00:00:10,340
O que vamos

4
00:00:10,340 --> 00:00:14,009
fazer hoje é dar os primeiros

5
00:00:14,009 --> 00:00:18,160
passos no aprendizado de Haskell.

6
00:00:18,160 --> 00:00:21,390
Um dos meus filmes favoritos de todos
os tempos

7
00:00:21,390 --> 00:00:25,890
é o Karate Kid e se vocês não viram
este filme,

8
00:00:25,890 --> 00:00:29,170
pare de assistir

9
00:00:29,170 --> 00:00:32,200
esta aula e vá assistir ao filme
primeiro.

10
00:00:32,200 --> 00:00:37,030
Sempre que preciso aprender algo novo,
eu assisto Karate Kid novamente

11
00:00:37,030 --> 00:00:40,730
e posso dizer à vocês... eu vi
talvez

12
00:00:40,730 --> 00:00:44,210
20 ou 30 vezes e sempre que assisto,

13
00:00:44,210 --> 00:00:47,820
aprendo algo novo.
Se vocês

14
00:00:47,820 --> 00:00:50,890
assistirem o filme, verão que

15
00:00:50,890 --> 00:00:55,500
o garoto aqui, Daniel, quer
aprender caratê

16
00:00:55,500 --> 00:00:59,390
e o senhor Miyagi, o cavalheiro
aqui

17
00:00:59,390 --> 00:01:03,320
do outro lador, faz ele fazer um
monte de 

18
00:01:03,320 --> 00:01:08,320
exercícios que o Daniel acha que 
são inúteis. E ele fica meio frustrado.

19
00:01:08,320 --> 00:01:11,400
Mas afim de aprender algo vocês tem
que ir

20
00:01:11,400 --> 00:01:15,650
através de uma série de exercícios, porque há 
uma grande quantidade de memória muscular ou,

21
00:01:15,650 --> 00:01:20,049
no caso de programação vocês deve ter 
uma memória muscular em seus dedos.

22
00:01:20,049 --> 00:01:22,950
São coisas que vocês não deveria ter que
pensar.

23
00:01:22,950 --> 00:01:27,520
Vocês tem que insistir. Vocês tem que
fazer uma e outra e outra vez.

24
00:01:27,520 --> 00:01:32,430
E isso é o que vamos fazer na 
aula de hoje.

25
00:01:32,430 --> 00:01:36,070
Então, não fique frustrado. 
Não seja como o Daniel.

26
00:01:36,070 --> 00:01:40,280
Fique de castigo e apenas faça seus 

27
00:01:40,280 --> 00:01:44,420
exercícios: wax on wax off, wax on, wax off...
(praticar, praticar e praticar)

28
00:01:44,420 --> 00:01:47,640
até que que se torne completamente 
automático

29
00:01:47,640 --> 00:01:51,450
e então podem usar seus cérebros para
resolver o problema real.

30
00:01:51,450 --> 00:01:55,649
Vocês não tem mais que pensar nos 
conceitos básicos. E toda vez que aprenderem

31
00:01:55,649 --> 00:01:56,549
algo novo

32
00:01:56,549 --> 00:02:01,049
assistam este grande filme.

33
00:02:01,049 --> 00:02:05,560
Vamos mostrar um pouco de Haskell. 
A implementação Haskell que vamos usar

34
00:02:05,560 --> 00:02:10,319
neste curso é a Glasgow Haskell
Compiler

35
00:02:10,319 --> 00:02:13,530
as vezes também chamada de Glorious
Haskell Compiler

36
00:02:13,530 --> 00:02:18,190
e GHC é a principal implementação de 
Haskell.

37
00:02:18,190 --> 00:02:23,540
Ela tem tanto o compilador quanto
um REPL loop

38
00:02:23,540 --> 00:02:26,900
interativo que vocês pode usar para
digitar o seu

39
00:02:26,900 --> 00:02:30,310
código.
A natureza interativa

40
00:02:30,310 --> 00:02:34,300
do interpretador GHC deixa
realmente fácil

41
00:02:34,300 --> 00:02:37,459
de experimentar com Haskell

42
00:02:37,459 --> 00:02:40,769
e este é o motivo pelo qual é também 
muito útil para este curso.

43
00:02:40,769 --> 00:02:44,330
Muitos dos exercícios

44
00:02:44,330 --> 00:02:47,790
que vocês terão durante o curso
vocês podem fazer

45
00:02:47,790 --> 00:02:51,519
usando o GHC.
Eu não

46
00:02:51,519 --> 00:02:54,800
vejo isso como trapacear pois

47
00:02:54,800 --> 00:02:58,730
como programadores, devemos realmente usar
o compilador

48
00:02:58,730 --> 00:03:04,420
para nos ajudar. O computador está lá
para nos ajudar a programar o computador.

49
00:03:04,420 --> 00:03:08,660
Se não o usarmos, seria estúpido.
GHC

50
00:03:08,660 --> 00:03:14,079
está gratuitamente disponível no website
aqui. O link estará também no

51
00:03:14,079 --> 00:03:17,880
website do curso, e vocês podem também

52
00:03:17,880 --> 00:03:21,220
usar o Google ou Bing para buscar
sobre a plataform Haskell

53
00:03:21,220 --> 00:03:24,780
que está disponível para as principais
plafatormas

54
00:03:24,780 --> 00:03:29,910
Mac, Windows e Linux.
Para iniciar o GHC,

55
00:03:29,910 --> 00:03:33,840
apenas digite a linha de comando 'ghci'

56
00:03:33,840 --> 00:03:37,549
e então vocês terão um

57
00:03:37,549 --> 00:03:41,230
texto surgindo e verão um prompt

58
00:03:41,230 --> 00:03:44,970
Prelude> e que é onde vocês podem
começar a digitar

59
00:03:44,970 --> 00:03:49,180
expressões. Por exemplo, podemos digitar
a expressão

60
00:03:49,180 --> 00:03:53,150
2 + 3 * 4 e

61
00:03:53,150 --> 00:03:57,690
o GHCI imprimirá então o resultado da expressão.
Neste caso estamos realmente usando

62
00:03:57,690 --> 00:04:01,380
o GHCi como um tipo de calculadora.

63
00:04:01,380 --> 00:04:05,250
É como uma pequena calculadora
na interface de linha de comando,

64
00:04:05,250 --> 00:04:10,340
em vez de uma calculdora com botões.
O que vemos também é que desde que

65
00:04:10,340 --> 00:04:13,680
2 + 3 * 4 é aparentemente 14

66
00:04:13,680 --> 00:04:17,459
a multiplicação é mais forte do que

67
00:04:17,459 --> 00:04:20,640
a adição. Assim, não há surpresas 
aqui pois

68
00:04:20,640 --> 00:04:24,450
a maioria das linguagens tem isso.
Se queremos

69
00:04:24,450 --> 00:04:28,450
fazer a adição primeiro e depois
a multiplicação, temos que colocar

70
00:04:28,450 --> 00:04:31,510
parêntesis, assim escrevemos
(2 + 3) * 4

71
00:04:31,510 --> 00:04:35,910
e então o resultado é 20.
Podemos fazer

72
00:04:35,910 --> 00:04:40,880
expressões mais complicadas como a
raiz quadrada de (3 ^ 2 + 4 ^2)

73
00:04:41,630 --> 00:04:46,690
e obtemos 5.

74
00:04:46,690 --> 00:04:50,100
Como vocês viram, existe o
Prelude>

75
00:04:50,100 --> 00:04:53,490
prompt

76
00:04:53,490 --> 00:04:58,260
aqui. Assim, o Haskell Prelude é como
o SDK para Haskell. Estas são todas as

77
00:04:58,260 --> 00:04:59,390
funções padrão

78
00:04:59,390 --> 00:05:03,330
que vem de graça com Haskell.
No website

79
00:05:03,330 --> 00:05:07,930
falaremos à vocês como obter
outras bibliotecas para Haskell,

80
00:05:07,930 --> 00:05:13,620
mas não iremos discutir isso em muitos
detalhes aqui. Vocês

81
00:05:13,620 --> 00:05:16,740
podem examinar isso.
Tentaremos

82
00:05:16,740 --> 00:05:20,840
ficar apenas com as funções da 
biblioteca padrão - o prelude

83
00:05:20,840 --> 00:05:21,390
padrão.

84
00:05:21,390 --> 00:05:27,680
Muitas das funões no prelude

85
00:05:27,680 --> 00:05:30,710
são funções de listas.

86
00:05:30,710 --> 00:05:34,750
Vamos passar por algumas
delas e então mais tarde no curso

87
00:05:34,750 --> 00:05:38,810
implementaremos estas funções
de várias maneiras

88
00:05:38,810 --> 00:05:42,500
diferentes. A primeira função aqui é a head,
que recebe uma lista,

89
00:05:42,500 --> 00:05:46,350
a forma de escrevermos uma lista em Haskell
é com colchetes e os

90
00:05:46,350 --> 00:05:48,280
elementos separados por vírgula,

91
00:05:48,280 --> 00:05:52,030
então a head de [1,2,3,4,5] é

92
00:05:52,030 --> 00:05:56,110
sem dúvida 1.
O tail,

93
00:05:56,110 --> 00:06:00,130
o oposto de head, é
tudo na lista

94
00:06:00,130 --> 00:06:03,340
exceto o head, então o tail de [1,2,3,4,5]

95
00:06:03,340 --> 00:06:07,710
é a lista [2,3,4,5].
Podemos também selecionar

96
00:06:07,710 --> 00:06:11,360
o n-th elemento de uma lista com
este operador

97
00:06:11,360 --> 00:06:16,250
de dois pontos de exclamações.
Se queremos selecionar o segundo elemento

98
00:06:16,250 --> 00:06:17,160
da lista

99
00:06:17,160 --> 00:06:20,320
[1,2,3,4,5] obtemos

100
00:06:20,320 --> 00:06:24,030
3. Então, o que aprendemos disto?
Bem...

101
00:06:24,030 --> 00:06:27,029
que o primeiro elemento da lista

102
00:06:27,029 --> 00:06:29,610
tem índice 0.

103
00:06:29,610 --> 00:06:32,749
Haskell inicia

104
00:06:32,749 --> 00:06:36,849
o índice da lista por zero.
Há

105
00:06:36,849 --> 00:06:40,409
2 pontos de exclamação aqui e há

106
00:06:40,409 --> 00:06:44,159
uma grande razão para isso:
porque em Haskell,

107
00:06:44,159 --> 00:06:47,189
listas não são arrays,
então a indexação de

108
00:06:47,189 --> 00:06:50,909
uma lista aqui no segundo elemento

109
00:06:50,909 --> 00:06:54,729
atravessará a lista. Então, ela
atravessará a lista, joga fora 1

110
00:06:54,729 --> 00:06:59,509
jogar 1 2 e então retorna 3.
Isto não é uma operação

111
00:06:59,509 --> 00:07:04,209
com tempo constante. Indexação em uma lista, 
ao contrário da indexação em uma array,

112
00:07:04,209 --> 00:07:07,919
em Haskell é linear no comprimento
da lista.

113
00:07:07,919 --> 00:07:13,099
Em geral linear no tamando da

114
00:07:13,099 --> 00:07:13,599
lista.

115
00:07:13,599 --> 00:07:17,509
Mas felizmente

116
00:07:17,509 --> 00:07:21,180
dificilmente veremos uso

117
00:07:21,180 --> 00:07:24,629
deste operador na prática.

118
00:07:24,629 --> 00:07:28,550
Se vocês se acharem querendo usar
indexação de lista

119
00:07:28,550 --> 00:07:34,180
então vocês sabem que não fizeram
wax on, wax off, wax on, wax off suficiente.

120
00:07:34,180 --> 00:07:37,569
Vocês ainda está muito na mentalidade da

121
00:07:37,569 --> 00:07:40,689
programação imperativa usando arrays.

122
00:07:40,689 --> 00:07:45,189
Em Haskell nós tipicamente usamos higher
order functions como map, filter, fold

123
00:07:45,189 --> 00:07:48,300
e não indexação para

124
00:07:48,300 --> 00:07:53,119
executar operações complexas em listas.
Aqui outro

125
00:07:53,119 --> 00:07:59,719
exemplo - take 3 - ele pega os três primeiros
elementos de uma lista. Se temos

126
00:07:59,719 --> 00:08:01,180
a lista [1,2,3,4,5]

127
00:08:01,180 --> 00:08:04,680
ele retorna os três primeiros
elementos.

128
00:08:04,680 --> 00:08:08,139
[1,2,3]
Drop

129
00:08:08,139 --> 00:08:11,619
é o oposto, ele pega um número

130
00:08:11,619 --> 00:08:16,719
e a lista e ele remove os primeiros
três elementos da lista. De alguma

131
00:08:16,719 --> 00:08:17,769
forma, drop

132
00:08:17,769 --> 00:08:20,819
e take são

133
00:08:20,819 --> 00:08:24,300
generalizações de head e tail.
Head e tail

134
00:08:24,300 --> 00:08:29,159
apenas pegam o primeiro e o resto de uma
lista e então com take e drop

135
00:08:29,159 --> 00:08:33,130
vocês podem generalizar para
números arbitrários.

136
00:08:33,130 --> 00:08:36,370
Calculando o comprimento de uma lista...

137
00:08:36,370 --> 00:08:40,459
o que fazemos 

138
00:08:40,459 --> 00:08:44,930
chamando a função length.
Length de [1,2,3,4,5] is 5.

139
00:08:44,930 --> 00:08:49,180
Novamente, listas em Haskell não são 
como arrays

140
00:08:49,180 --> 00:08:53,910
em outras linguagens, pegar o comprimento
não é uma operação de tempo constante.

141
00:08:53,910 --> 00:08:58,070
Leva tempo linearmente no 
comprimento de uma lista.

142
00:08:58,070 --> 00:09:04,890
Sum soma todos os elementos
se chamamos sum de [1,2,3,4,5] 

143
00:09:04,890 --> 00:09:09,040
o resultado é 15.
Product

144
00:09:09,040 --> 00:09:12,570
é o mesmo que sum, exceto que em vez
de adicionar os números, ela

145
00:09:12,570 --> 00:09:17,080
multiplica todos eles, então
multiplicando

146
00:09:17,080 --> 00:09:21,520
1, 2, 3, 4 e 5 - como obter
o fatorial de 5 -

147
00:09:21,520 --> 00:09:27,649
é 120. Juntar duas listas é outra
operação comum: vocẽ pega duas listas e

148
00:09:27,649 --> 00:09:30,290
esmagam elas juntas em outra lista nova,
então se eu faço

149
00:09:30,290 --> 00:09:33,570
append [1,2,3] com [4,5]

150
00:09:33,570 --> 00:09:38,660
temos a lista [1,2,3,4,5].
A última função aqui

151
00:09:38,660 --> 00:09:43,220
neste slide é inverter  uma lista.

152
00:09:43,220 --> 00:09:46,260
Reverse [1,2,3,4,5] dá a vocês

153
00:09:46,260 --> 00:09:50,380
[5,4,3,2,1]
No resto 

154
00:09:50,380 --> 00:09:54,990
desta aula, nós definiremos todas
estas funções nós mesmos

155
00:09:54,990 --> 00:09:58,300
de diversas formas, mas agora

156
00:09:58,300 --> 00:10:01,600
é bom brincar com elas para ver
o que fazem,

157
00:10:01,600 --> 00:10:05,040
e então estaremos prontos
para implementa-lás.

158
00:10:05,040 --> 00:10:08,640
Então saberemos o que elas 
deveriam fazer.

159
00:10:08,640 --> 00:10:12,380
Aqui está

160
00:10:12,380 --> 00:10:16,260
um outro slide muito importante

161
00:10:16,260 --> 00:10:20,839
que é sobre aplicação de função.
Haskell

162
00:10:20,839 --> 00:10:24,450
é muito diferente de matemática,
por um lado,

the one side

163
00:10:24,450 --> 00:10:27,700
e muito diferente de outras
linguagens de programação também.

164
00:10:27,700 --> 00:10:32,910
Em matemática quando vocês aplicam uma função
matemática que vocês fazem na escola ouram

165
00:10:32,910 --> 00:10:34,860
na faculdade quando fazem análise -

166
00:10:34,860 --> 00:10:38,100
quando vocês aplicam uma função a um argumento

167
00:10:38,100 --> 00:10:41,649
vocês sempre usam parêntesis
Neste caso

168
00:10:41,649 --> 00:10:45,100
quando aplicamos uma função aqui...
Isto é

169
00:10:45,100 --> 00:10:49,410
aplicar uma função f aos argumentos
a ou b

170
00:10:49,410 --> 00:10:52,180
e então adicionar c

171
00:10:52,180 --> 00:10:55,910
espaço d.
Em matemática,

172
00:10:55,910 --> 00:10:59,460
tipicamente, e isso vem da 
física

173
00:10:59,460 --> 00:11:03,720
é que espaço significa multiplicação.

174
00:11:03,720 --> 00:11:07,300
Se vocês olharem um livro de
matemática

175
00:11:07,300 --> 00:11:11,430
e verem c d

176
00:11:11,430 --> 00:11:14,800
isso normalmente significa c multiplicado
por d

177
00:11:14,800 --> 00:11:18,480
e portanto, quando vocês aplicam uma função
estão usando

178
00:11:18,480 --> 00:11:24,330
parêntesis como este para não ter ambigüidade.
Uma vez que em Haskell

179
00:11:24,330 --> 00:11:27,530
aplicação de função é usada com muita
mais frequência

180
00:11:27,530 --> 00:11:30,990
do que multiplicação,
considerando que na física

181
00:11:30,990 --> 00:11:34,630
multiplicação é usada com mais frequência, então
é onde

182
00:11:34,630 --> 00:11:40,080
é dado à multiplicação um simbolo
mais claro, ao menos

183
00:11:40,080 --> 00:11:43,680
um símbolo mais visível, um símbolo mais amplo.
Em Haskell,

184
00:11:43,680 --> 00:11:46,680
a aplicação de função é denotada por
espaço em branco

185
00:11:46,680 --> 00:11:50,050
para que não seja muito para
encarar.

186
00:11:50,050 --> 00:11:54,050
Assim, em Haskell em vez de escrever
f (a,b) + c d

187
00:11:54,050 --> 00:11:58,960
a aplicação de uma função
torna-se

188
00:11:58,960 --> 00:12:02,660
denotada por um espaço,
assim f a b + c * d

189
00:12:06,180 --> 00:12:09,540
Na maioria das linguagens de
programação

190
00:12:09,540 --> 00:12:13,790
vocês escreveriam

191
00:12:13,790 --> 00:12:18,540
f (a, b) então elas são de 
alguma forma o

192
00:12:18,540 --> 00:12:23,680
pior de dois mundos:
vocês tem que escrever tudo explícito

193
00:12:23,680 --> 00:12:27,970
Em Haskell decidimos que a
aplicação de função 

194
00:12:27,970 --> 00:12:31,900
é feita usando um espaço e 
a multiplicação

195
00:12:31,900 --> 00:12:35,500
é feita usando multiplicação.

196
00:12:35,500 --> 00:12:39,080
Também,

197
00:12:39,080 --> 00:12:42,480
aplicaçao de função é mais forte

198
00:12:42,480 --> 00:12:45,790
do que qualquer outro operador.
Se vocês verem

199
00:12:45,790 --> 00:12:49,820
f a + b, isso significa que
f aplicado a a

200
00:12:49,820 --> 00:12:52,970
mais b,
não signifca f

201
00:12:52,970 --> 00:12:57,250
aplicado a (a + b).

202
00:12:57,250 --> 00:13:01,080
As pessoas tem que acostumar com isso,
Isso não significa

203
00:13:01,080 --> 00:13:04,210
f vezes a mais b.
Significa

204
00:13:04,210 --> 00:13:05,350
f aplicado

205
00:13:05,350 --> 00:13:08,400
a a mais b.
Então, isso é

206
00:13:08,400 --> 00:13:12,370
semelhante a multiplicação mais forte 
do que a adição.

207
00:13:12,370 --> 00:13:16,800
Aqui está uma tabela que dá a vocês

208
00:13:16,800 --> 00:13:20,210
mais algumas expressões,

209
00:13:20,210 --> 00:13:23,410
de um lado Haskell 

210
00:13:23,410 --> 00:13:27,750
e do outros lado matemática.
Isto é o que vocês deveriam esquecer

211
00:13:27,750 --> 00:13:31,240
Eu vou ficar em frente disso... isto
é o que vocês deveriam esquecer

212
00:13:31,240 --> 00:13:34,320
E isto é o que vocês deveriam aprender

213
00:13:34,320 --> 00:13:38,590
Então esqueça o que está atrás de mim
e aprenda

214
00:13:38,590 --> 00:13:42,670
o que está deste lado.

215
00:13:42,670 --> 00:13:45,890
Em vez de f abre parêntesis x,
escrevemos

216
00:13:45,890 --> 00:13:50,420
f espaço x. Em vez de passar dois
parâmetros para f

217
00:13:50,420 --> 00:13:55,230
aplicamos f à x e então
aplicamos o resultado à y.

218
00:13:55,230 --> 00:14:00,540
Em vez de f abre parêntesis g, abre 
parêntesis x escrevemos

219
00:14:00,540 --> 00:14:04,110
f de g de x e mais tarde
veremos 

220
00:14:04,110 --> 00:14:07,120
que podemos escrever isso usando
composição de função

221
00:14:07,120 --> 00:14:11,680
como f compoẽm g.

222
00:14:11,680 --> 00:14:14,940
o resto dos exemplos

223
00:14:14,940 --> 00:14:18,720
deveriam ser óbvio.
Se vocês apenas olharem

224
00:14:18,720 --> 00:14:22,680
o formato desses dois - não tente
interpretar eles - vocẽs verão que o

225
00:14:22,680 --> 00:14:24,300
código Haskell aqui

226
00:14:24,300 --> 00:14:27,650
parece muito mais leve do que o código

227
00:14:27,650 --> 00:14:33,070
deste lado. Programadores Haskell são
preguiçosos - não queremos escrever muito -

228
00:14:33,070 --> 00:14:36,470
então este parece muito mais bonito
do que este

229
00:14:36,470 --> 00:14:39,860
e este é o motivo pelo qual a síntaxe
de Haskell é projetada do jeito que é.

230
00:14:39,860 --> 00:14:43,350
Obrigado!.
Este foi o final da Parte 1.

231
00:14:43,350 --> 00:14:46,680
Vejo vocês daqui a pouco para
o restante do

232
00:14:46,680 --> 00:14:47,320
capítulo 1.